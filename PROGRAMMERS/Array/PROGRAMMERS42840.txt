두개 뽑아서 더하기 문제 분석

반환 배열의 크기가 0 ~ 3이므로 고정 X -> ArrayList 사용

반환 배열의 값이 여럿일 경우 오름차순 정렬을 해야 함

문제의 수는 최대 10,000 문제이므로 수포자들은 패턴을 반복하며 찍음
1번 수포자의 패턴 : 1, 2, 3, 4, 5
2번 수포자의 패턴 : 2, 1, 2, 3, 2, 4, 2, 5
3번 수포자의 패턴 : 3, 3, 1, 1, 2, 2, 4, 4, 5, 5

2차원 배열에 담아 중첩for문 사용시 O(N^2)이므로 패턴을 각 1차원 배열에 담고 3번 for문 반복

반복하는 횟수는 문제 수 만큼인데 패턴을 돌아가면서 반복해야 함
e.g., 1번 수포자가 10문제를 찍는다고 가정하고
인덱스로 표현하면 0, 1, 2, 3, 4, 0, 1, 2, 3, 4
나머지 연산으로 정답 인덱스를 패턴 개수로 나눈 인덱스가 패턴 인덱스가 됨
나머지 연산 표현식 -> 0 % 5 = 0, 1 % 5 = 1, 2 % 5 = 2, 3 % 5 = 3, 4 % 5 = 4, 
                    5 % 5 = 0, 6 % 5 = 1, 7 % 5 = 2, 8 % 5 = 3, 9 % 5 = 4
===> 정답 인덱스 % 수포자의 패턴 개수

채점할 배열을 만들어 1, 2, 3번 수포자의 점수를 받고
거기서 최댓값을 for문을 통해 뽑아내고
최댓값과 동일한 수포자를 일등 배열에 넣어야 함

그리고 여럿이면 정렬까지 해서 반환
만약 비어있거나, 1명만 있어도 stream클래스의 sorted 메서드는 성능에 크게 영향을 주지 않기 때문에
최종적으로 정렬까지 해서 반환


--------------------------------------------------------------------------

***수도 코드***

int형 배열 변수 firstPattern에 1, 2, 3, 4, 5 값 대입
int형 배열 변수 secondPattern에 2, 1, 2, 3, 2, 4, 2, 5 값 대입
int형 배열 변수 thirdPattern에 3, 3, 1, 1, 2, 2, 4, 4, 5, 5 값 대입
int형 배열 변수 scores 선언

for (answers의 길이 만큼 반복) {
    if (answers[i]랑 firstPattern[i % firstPattern.length]가 같으면) {
        scores[0] 증가
    }

    if (answers[i]랑 secondPattern[i % secondPattern.length]가 같으면) {
        scores[1] 증가
    }

    if (answers[i]랑 thirdPattern[i % thirdPattern.length]가 같으면) {
        scores[2] 증가
    }
}

int형 변수 maxScore에 answers[0] 값 대입
for (scores의 길이 만큼 반복) {
    if (scores[i]가 maxScore보다 크다면) {
        maxScore에 scores[i] 대입
    }
}

Integer형 ArrayList 변수 winner 선언
for (scores의 길이 만큼 반복) {
    if (scores[i]가 maxScore과 같다면) {
        winner에 수포자 번호 추가
    }
}

winner를 정렬해 int 배열로 변환하여 반환