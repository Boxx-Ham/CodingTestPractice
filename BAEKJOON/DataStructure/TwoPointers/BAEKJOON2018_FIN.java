package BAEKJOON.DataStructure.TwoPointers;

/*
 * 투 포인터 및 문제를 완벽히 이해하고 진행
 * 
 * e.g., N = 10인 경우
 * p1, p2 는 연속된 자연수의 처음과 끝을 의미
 * 연속된 자연수의 합이 15가 되는 경우 : 1 + 2 + 3 + 4
 * p1 : 1, p2 : 4가 되는거임.
 * 
 * p1 : 1, p2 : 1
 * 1 < 10 이므로 계속 연속된 수를 더해줌.
 * 
 * p1 : 1, p2 : 2
 * 1 + 2 = 3 < 10
 * 
 * p1 : 1, p2 : 3
 * 1 + 2 + 3 = 6 < 10
 * 
 * p1 : 1, p2 : 4
 * 1 + 2 + 3 + 4 = 10 = 10 만족하므로 가짓수가 1개.
 * 
 * p1 : 1, p2 : 5
 * 1 + 2 + 3 + 4 + 5 = 15 > 10 이므로 1부터 시작하는 연속된 자연수의 합의 가짓수는 1개를 끝으로 끝남.
 * 
 * p1 : 2, p2 : 5
 * 2 + 3 + 4 + 5 = 14 > 10 여전히 10보다 큼으로 2에서 시작되는 것은 0으로 끝남.
 * 
 * p1 : 3, p2 : 5
 * 3 + 4 + 5 = 12 > 10 -> 3 : 0 으로 끝.
 * 
 * p1 : 4, p2 : 5
 * 4 + 5 = 9 < 10
 * p1 : 4, p2 : 6
 * 4 + 5 + 6 = 15 > 10 -> 4 : 0 으로 끝.
 * 
 * p1 : 5, p2 : 6
 * 5 + 6 = 11 > 10 -> 5 : 0으로 끝.
 * 
 * p1 : 6, p2 : 6
 * 6 < 10 
 * p1 : 6, p2 : 7
 * 6 + 7 = 13 > 10 -> 6 : 0
 * 
 * p1 : 7, p2 : 7
 * 7 < 10
 * p1 : 7, p2 : 8
 * 7 + 8 = 15 > 10 -> 7 : 0
 * 
 * p1 : 8, p2 : 8
 * 8 < 10 
 * p1 : 8, p2 : 9
 * 8 + 9 = 17 > 10 -> 8 : 0
 * 
 * p1 : 9, p2 : 9
 * 9 < 10
 * p1 : 9, p2 : 10
 * 9 + 10 = 19 > 10 -> 9 : 0
 * 
 * p1 : 10, p2 : 10
 * 10 = 10 -> 가짓수 1 증가
 * 
 * p2가 11 이 되면 N(10)보다 커지므로 종료.
 */

import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class BAEKJOON2018_FIN {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // N 입력 받기
        int N = Integer.parseInt(br.readLine());

        // 연속해서 더해진 합의 시작, 끝 숫자를 담는 변수 선언
        int p1 = 1; // 1부터 시작
        int p2 = 1; // 1부터 시작 

        int sum = 1;    // 1부터 시작하므로 더하는 것도 1로 시작.
        int count = 1;  // 자기 자신 또한 연속된 자연수의 합으로 인정되므로 추가해줌. (e.g., 15 = 15)

        // 연산 시작
        while (p2 < N) {    // 마지막으로 더해지는 자연수가 N이랑 같거나 크면 N + A(이전에 더해진 연속된 자연수의 합) 이 N보다 무조건적으로 커짐. N인 경우를 이미 가짓수에 넣었으니 N 보다 작은 경우의 계산만 진행
            // p1부터 p2의 합인 sum이 N 보다 작은 경우
            if (sum < N) {
                // p2를 증가시켜 p1부터 p2까지의 합을 증가시켜야 함.
                // e.g., 1 < 10, 1 + 2 를 계산. -> p2 : 2, sum : 1 + 2
                p2++;
                sum += p2;

            // p1부터 p2까지의 합(sum)이 N이랑 같다면 가짓수가 하나 증가하게 됨.
            } else if (sum == N) {
                // 가짓수 증가, 다음 경우 찾기 위해 p2 증가, sum에 p2 더하기.
                // e.g., 1 + 2 + 3 + 4 = 10 = 10, 가짓수 증가, 다음 가짓수 찾기 위해 p2 증가
                count++;
                p2++;
                sum += p2;

            // p1부터 p2까지의 합(sum)이 N보다 커지게 되는 경우
            } else {
                // 커지게 되면 현재 p1에서는 더 이상 가짓수를 찾을 수 없으니 p1을 증가시킴.
                // 증가된 p1부터 p2까지의 합을 다시 체크
                // e.g., 1 + 2 + 3 + 4 + 5 = 15 > 10 이므로 1부터 시작하는 가짓수는 끝남.
                // p1을 1 증가시켜 2부터 시작해야 함.
                // 2 + 3 + 4 + 5 = 14, sum = 14이므로 p1을 증가시키기 전에 p1을 먼저 sum에서 빼줘야 함.
                sum -= p1;
                p1++;
            }
        }

        System.out.println(count);
    }
}
