###1로 만들기 문제 분석

12 -> 3
12 / 2 = 6
6 / 2 = 3
(3 - 1) / 2 = 1

4 -> 2
4 / 2 = 2
2 / 2 = 1

15 -> 3
(15 - 1) / 2 = 7
(7 - 1) / 2 = 3
(3 - 1) / 2 =1

1 -> 0

14 -> 3
14 / 2 = 7
(7 - 1) / 2 = 3
(3 - 1) / 2 = 1

약간 2^x 의 x가 개수 아닌가..?

16 -> 4
16 / 2 = 8
8 / 2 = 4
4 / 2 = 2
2 / 2 = 1

25 -> 4
(25 - 1) / 2 = 12
12 / 2 = 6
6 / 2 = 3
(3 - 1) / 2 =1

30 -> 4
30 / 2 = 15
(15 - 1) / 2 = 7
(7 - 1) / 2 = 3
(3 - 1) / 2 = 1

맞는 듯.

num_list의 원소의 최대 크기는 30 < 2^5

num_list[i] = 1일 때 : 0
2^1 <= num_list[i] < 2^2일 때 : 1
2^2 <= num_list[i] < 2^3일 때 : 2
2^3 <= num_list[i] < 2^4일 때 : 3
2^4 <= num_list[i] < 2^5일 때 : 4

5가지로 나눌 수 있음

--------------------------------------------------------
### 수도 코드

int count = 0

for (num_list의 길이 만큼 반복) {   <- O(N)
    if (num_list[i]가 1일 때) {
        continue;
    }

    for (1~4까지 반복) {    <- O(4)
        if (2^j <= num_list[i] < 2^(j+1)) {
            count += j
        }
    }
}

count 반환